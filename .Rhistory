source('~/Coursera/Data Science/R Programming/week3/ProgrammingAssignment2/cachematrix.R')
source('~/Coursera/Data Science/R Programming/week3/ProgrammingAssignment2/cachematrix.R')
source('~/Coursera/Data Science/R Programming/week3/ProgrammingAssignment2/cachematrix.R')
source('~/Coursera/Data Science/R Programming/week3/ProgrammingAssignment2/cachematrix.R')
source('~/Coursera/Data Science/R Programming/week3/ProgrammingAssignment2/cachematrix.R')
source('~/Coursera/Data Science/R Programming/week3/ProgrammingAssignment2/cachematrix.R')
source('~/Coursera/Data Science/R Programming/week3/ProgrammingAssignment2/cachematrix.R')
source('~/Coursera/Data Science/R Programming/week3/ProgrammingAssignment2/cachematrix.R')
source('~/Coursera/Data Science/R Programming/week3/ProgrammingAssignment2/cachematrix.R')
source('~/Coursera/Data Science/R Programming/week3/ProgrammingAssignment2/cachematrix.R')
source('~/Coursera/Data Science/R Programming/week3/ProgrammingAssignment2/cachematrix.R')
source('~/Coursera/Data Science/R Programming/week3/ProgrammingAssignment2/cachematrix.R')
source('~/Coursera/Data Science/R Programming/week3/ProgrammingAssignment2/cachematrix.R')
source('~/Coursera/Data Science/R Programming/week3/ProgrammingAssignment2/cachematrix.R')
source('~/Coursera/Data Science/R Programming/week3/ProgrammingAssignment2/cachematrix.R')
test1
z1 <- makeCacheMatrix(test1)
cacheSolve(z1)
cacheSolve(z1)
source('~/Coursera/Data Science/R Programming/week3/ProgrammingAssignment2/cachematrix.R')
z1 <- makeCacheMatrix(test1)
cacheSolve(z1)
cacheSolve(z1)
test1
source('~/Coursera/Data Science/R Programming/week3/ProgrammingAssignment2/cachematrix.R')
length("74e67bbe669625f841619029bb0b7bdf801558a0")
length(character("74e67bbe669625f841619029bb0b7bdf801558a0"))
install.packages("RMySQL")
library(RMySQL)
ucscDb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show database;");dbDisconnect(ucscDb)
result <- dbGetQuery(ucscDb,"show databases;");dbDisconnect(ucscDb)
result
head(result,8)
hg19 <- dbConnect(MySQL(),user="hg19",host="genome-mysql.cse.ucsc.edu")
hg19 <- dbConnect(MySQL(),user="genome",db="hg19",host="genome-mysql.cse.ucsc.edu")
dbDisconnect(ucscDb)
library(RMySQL)
hg19 <- dbConnect(MySQL(),user="genome",db="hg19",host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19,"select count(*) from affyU133Plus2")
dbDisconnect(hg19)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createFile("example.h5","foo")
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","bar")
created = h5createGroup("example.h5","foo/foobar")
h5ls("example.h5")
A = matrix(1:10,nr=5,nc=2)
h5write(A,"example.h5","foo/A")
B = array(seq(0.1,2.0,by=0.1),dim=c(5,2,2))
attr(B,"scale") <- "liter"
h5write(B,"example.h5","foo/foobar/B")
h5ls("example.h5")
h5ls("example.h5")
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "01e160fd7e69534c096e",
secret = "1e9cc117089e71387ce10875fd6576d2f360a275")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "01e160fd7e69534c096e",
secret = "1e9cc117089e71387ce10875fd6576d2f360a275")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
install.packages("httpuv")
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "01e160fd7e69534c096e",
secret = "1e9cc117089e71387ce10875fd6576d2f360a275")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "01e160fd7e69534c096e",
secret = "1e9cc117089e71387ce10875fd6576d2f360a275")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
req$content
req$headers
install.packages("sqldf")
survey_data <- readLines(url("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"))
class(survey_data)
survey_data
head(survey_data,10)
acs <- read.csv("Coursera/Data Science/Getting and Cleaning Data/week2/getdata-data-ss06pid.csv")
sqldf("select pwgtp1 from acs where AGEP < 50")
library(sqldf)
sqldf("select pwgtp1 from acs where AGEP < 50")
remove.packages("RMySQL")
sqldf("select pwgtp1 from acs where AGEP < 50")
remove.packages(RMySQL)
library(sqldf)
sqldf("select pwgtp1 from acs where AGEP < 50")
sqldf("select pwgtp1 from acs where AGEP < 50")
library(sqldf)
acs <- read.csv("Coursera/Data Science/Getting and Cleaning Data/week2/getdata-data-ss06pid.csv")
sqldf("select pwgtp1 from acs where AGEP < 50")
dats <- readLines(url("http://biostat.jhsph.edu/~jleek/contact.html"))
?nchar
?readLine
?readLines
dats[10]
nchar(dats[c(10,20,30,100)])
test <- file("Coursera/Data Science/Getting and Cleaning Data/week2/getdata-wksst8110.for")
test
read.fortran("Coursera/Data Science/Getting and Cleaning Data/week2/getdata-wksst8110.for")
read.delim("Coursera/Data Science/Getting and Cleaning Data/week2/getdata-wksst8110.for")
saba <- read.delim("Coursera/Data Science/Getting and Cleaning Data/week2/getdata-wksst8110.for")
head(saba,10)
class(saba)
saba[1]
?read.delim
saba <- read.delim("Coursera/Data Science/Getting and Cleaning Data/week2/getdata-wksst8110.for",sep="\s")
saba <- read.delim("Coursera/Data Science/Getting and Cleaning Data/week2/getdata-wksst8110.for",sep=" ")
saba <- read.delim("Coursera/Data Science/Getting and Cleaning Data/week2/getdata-wksst8110.for",sep=" ",header=F,quote="")
saba
head(saba,3)
saba <- read.delim("Coursera/Data Science/Getting and Cleaning Data/week2/getdata-wksst8110.for",sep=" ")
saba <- read.delim("Coursera/Data Science/Getting and Cleaning Data/week2/getdata-wksst8110.for")
saba <- read.delim("Coursera/Data Science/Getting and Cleaning Data/week2/getdata-wksst8110.for",sep=" -")
saba <- read.delim("Coursera/Data Science/Getting and Cleaning Data/week2/getdata-wksst8110.for",sep="-")
saba <- read.delim("Coursera/Data Science/Getting and Cleaning Data/week2/getdata-wksst8110.for",sep=" ")
saba <- read.delim("Coursera/Data Science/Getting and Cleaning Data/week2/getdata-wksst8110.for",sep="")
saba[,4]
sum(saba[,4])
library(swirl)
install_from_swirl("Exploratory Data Analysis")
library(swirl)
swirl()
install.packages(ggplot2)
install.packages("ggplot2")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm,col="blue")
abline(h=12)
hist(ppm,col="green")
rug(ppm)
low
high
hist(ppm,col="green",breaks=100)
rug(ppm)
hist(ppm,col="green")
abline(v=12,lwd=2)
abline(v=median(ppm),col="magenta",lwd=4)
names(pollution)
reg<-table(pollution$region)
reg
barplot(reg,col="wheat",main="Number of Counties in Each Region")
boxplot(data=pollution,col="red",pm25~region)
boxplot(pm25~region,data=pollution,col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution,region == "east")
head(east)
hist(east,col="green")
hist(east$pm25,col="green")
hist(subset(pollution$pm25,region=="west"),col="green")
hist(subset(pollution$pm25,pollution$region=="west"),col="green")
hist(subset(pollution,region=="west")$pm25, col = "green")
plot(pollution)
with(pollution,plot(latitude,pm25))
abline(h=12,lwd=2,lty=2)
plot(pollution$latitude,pollution$pm25,col=pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h=12,lwd=2,lty=2)
nxt()
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution,region=="west")
plot(west$latitude,west$pm25,main=="west",)
plot(west$latitude,west$pm25,main="west",)
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "east")
plot(east$latitude, east$pm25, main = "East")
library(swirl)
swirl()
install.packages("fields")
swirl()
dim(pm0)
stop()
pause()
halt()
play()
quit
quit()
library(swirl)
swirl()
head(airquality)
xyplot(Ozone~Wind,airquality)
xyplot(Ozone~Wind,airquality,col = "red",pch=8.main="Big Apple Data")
xyplot(Ozone~Wind,airquality,col = "red",pch=8,main="Big Apple Data")
xyplot(Ozone~Wind,airquality,col = "red",pch=8,main="Big Apple Data",layout=c(5,1))
xyplot(Ozone~Wind | as.factor(Month),airquality,col = "red",pch=8,main="Big Apple Data",layout=c(5,1))
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, layout=c(5,1))
xyplot(Ozone~Wind | Month ,airquality,col = "red",pch=8,main="Big Apple Data",layout=c(5,1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout=c(5,1))
p<-xyplot(Ozone~Wind,airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
nxt()
nxt()
?swirl
skip()
xyplot(y~x|f,layout=c(2,1))
v1
v2
myedit("plot1.R")
skip()
skip()
skip()
str(diamonds)
table(diamonds$color)
table(diamonds$color,diamonds$cut)
skip()
skip()
xyplot(price~carat|color*cut,data=diamonds,strip=FALSE,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
xyplot(price~carat|color*cut,data=diamonds,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
sample(colors(),10)
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
str(mpg)
qplot(displ,hwy,mpg)
qplot(displ,hwy,data=mpg)
skip()
skip()
qplot(t=hwy,data=mpg,color=drv)
qplot(y=hwy,data=mpg,color=drv)
myhigh
skip()
skip()
skip()
skip()
skip()
skip()
swirl()
skip()
swirl()
qplot(displ,hwy,data=mpg,geom=paste("point","smooth"),facets = .~drv,method="loess")
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets = .~drv,method="loess")
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets = .~drv)
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets = .~drv,method="loess")
skip()
library(swirl)
swirl()
skip()
install.packages("ggplo2")
install.packages("ggplot2")
install.packages("ggplot2")
library(swirl)
swirl()
skip()
?qplot
?qplot
library(swirl)
swirl()
library(ggplot2)
qplot(displ, hwy, data = mpg, geom=c("point",
| "smooth"),facets=.~drv,method="loess")
qplot(displ, hwy, data = mpg, geom=c("point","smooth"),facets=.~drv,method="loess")
install.package("swirl")
install.packages("swirl")
install.packages("swirl")
library(swirl)
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
g
summary(g)
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?nlme
str(Diet)
str(BodyWeight)
?BodyWeight
?panel.lmline
library(ggplot2)
?geom
??geom
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
install.packages("ggplot2movies")
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
?aes
?splom
library(lattice)
?trellis.par.set
?lpoints
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
times <- read.table("comment_times_1000_hotshot1.txt",colClasses = c("Date"))
times <- read.table("comment_times_1000_hotshot1.txt")
as.Date.character(times)
?as.Date.numeric
as.POSIXct(times,origin="1970-01-01")
as.POSIXct(times$V1,origin="1970-01-01")
plot(as.POSIXct(times$V1,origin="1970-01-01"))
?plot
?"POSIXct"
as.POSIXlt(times$V1,origin="1970-01-01")
postTimes <- as.POSIXlt(times$V1,origin="1970-01-01")
postTimes[1]
class(postTimes[1])
postTimes[1]$sec
postTimes$wday
hist(postTimes$wday)
hist(postTimes$hour)
hist(postTimes$hour,xlab = "Hour of Day",main = "Wiggles Reddit Post Frequency by Hour of Day")
?hist
hist(postTimes$month,xlab = "Month",main = "Wiggles Reddit Post Frequency by Month")
postTimes$month
hist(postTimes$mon,xlab = "Month",main = "Wiggles Reddit Post Frequency by Month")
?hist
hist(postTimes$mon,xlab = "Month",main = "Wiggles Reddit Post Frequency by Month",xlim = 3)
hist(postTimes$mon,xlab = "Month",main = "Wiggles Reddit Post Frequency by Month",xlim = 2)
hist(postTimes$mon,xlab = "Month",main = "Wiggles Reddit Post Frequency by Month")
hist(postTimes$hour,xlab = "Hour of Day",main = "Wiggles Reddit Post Frequency by Hour of Day")
hist(postTimes$hour,xlab = "Hour of Day",main = "Wiggles Reddit Post Frequency by Hour of Day",xlim = 2)
hist(postTimes$hour,xlab = "Hour of Day",main = "Wiggles Reddit Post Frequency by Hour of Day")
hist(postTimes$hour,xlab = "Hour of Day",main = "Wiggles Reddit Post Frequency by Hour of Day",xlim=1:24)
hist(postTimes$hour,xlab = "Hour of Day",main = "Wiggles Reddit Post Frequency by Hour of Day",xlim=24)
hist(postTimes$hour,xlab = "Hour of Day",main = "Wiggles Reddit Post Frequency by Hour of Day",xlim=1)
hist(postTimes$hour,xlab = "Hour of Day",main = "Wiggles Reddit Post Frequency by Hour of Day")
?range
?breaks
?hist
hist(postTimes$hour,xlab = "Hour of Day",main = "Wiggles Reddit Post Frequency by Hour of Day",breaks=24)
hist(postTimes$hour,xlab = "Hour of Day",main = "Wiggles Reddit Post Frequency by Hour of Day",breaks=24,xlim=24)
hist(postTimes$hour,xlab = "Hour of Day",main = "Wiggles Reddit Post Frequency by Hour of Day",breaks=24)
?hist
hist(postTimes$hour,xlab = "Hour of Day",main = "Wiggles Reddit Post Frequency by Hour of Day",breaks=24,right=F)
?hist
hist(postTimes$hour,xlab = "Hour of Day",main = "Wiggles Reddit Post Frequency by Hour of Day",breaks=24)
hist(postTimes$hour,xlab = "Hour of Day",main = "Wiggles Reddit Post Frequency by Hour of Day",breaks=24,col="Magenta")
hist(postTimes$hour,xlab = "Hour of Day",main = "Wiggles Reddit Post Frequency by Hour of Day",breaks="FD",col="Magenta")
hist(postTimes$hour,xlab = "Hour of Day",main = "Wiggles Reddit Post Frequency by Hour of Day",breaks=24,col="Magenta")
hist(postTimes$hour,xlab = "Hour of Day",main = "Wiggles Reddit Post Frequency by Hour of Day",breaks=24,col="Magenta",xlim=c(1,24))
hist(postTimes$hour,xlab = "Hour of Day",main = "Wiggles Reddit Post Frequency by Hour of Day",breaks=24,col="Magenta",xlim=c(1,20))
hist(postTimes$hour,xlab = "Hour of Day",main = "Wiggles Reddit Post Frequency by Hour of Day",breaks=24,col="Magenta",xlim=c(1,25))
hist(postTimes$hour,xlab = "Hour of Day",main = "Wiggles Reddit Post Frequency by Hour of Day",breaks=24,col="Magenta",xlim=c(0,24))
hist(postTimes$hour,xlab = "Hour of Day",main = "Wiggles Reddit Post Frequency by Hour of Day",breaks=25,col="Magenta",xlim=c(0,25))
?unzip
setwd("~/Coursera/Data Science/Reproducible Research/week1/RepData_PeerAssessment1")
unzip("activity.zip")
ls
ls()
dir()
?rm
?rm.file
file.remove("activity.csv")
unzip("activity.zip")
actDat <- read.csv("activity.csv")
summarize(actDat)
library(dplyr)
summarize(actDat)
actDat <- read.csv("activity.csv",header = TRUE)
summarize(actDat)
?summarize
dim(actDat)
head(actDat)
